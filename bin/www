#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('TickTrade:server');
var http = require('http');
var ingelogdeUserController = require('../appl/controllers/ingelogdeUserController.js');
var chatController = require('../appl/controllers/chatController.js');
var ticketController = require('../appl/controllers/serverTicketController.js');


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io').listen(server);

io.on('connection',handleIO);
function handleIO(socket){

  function disconnect()
  {
    console.log("client disconnected")
  }
  console.log("client connected");
  socket.on("disconnect",disconnect);

  socket.on("nieuwticketje",function(msg){
    io.emit("alletickets",msg);
  });

  socket.on("traderequest",function(msg){
    var ticketSellerID = msg[0];
    var ticketEigenID = msg[1];
    var ticketEigenNaam = msg[2];

    console.log("ticketSellerID "+ticketSellerID);
    console.log("ticketEigenID "+ticketEigenID);
    console.log("ticketEigeNaam "+ticketEigenNaam);

    var check = ingelogdeUserController.zoekonoff(ticketSellerID);
    check.then(function(data){
      //var check2 = data._doc.userID;
      if(data == null){
        console.log("hij is er niet");
      }
      else{
        var check2 = data._doc.userID;
        console.log(check2);
        var msg = [ticketEigenNaam,ticketSellerID];
        io.emit("testtraderequest",msg);
      }
    });
  });

  socket.on("tradenotaccept",function(msg){
    var userIdVanWie = msg[0];
    var userIdNaarWie = msg[1];
    var naamVanWie = msg[2];

    console.log("userIdVanWie "+userIdVanWie);
    console.log("userIdNaarWie "+userIdNaarWie);
    console.log("naamVanWie "+naamVanWie);
    var msg = [userIdVanWie,userIdNaarWie,naamVanWie];
    io.emit("tradeaccepted",msg);

  });

  socket.on("typeit",function(msg){
    console.log(msg);
    var tekst = msg[0];
    var verzender = msg[1];
    var chatroomID = msg[3];
    //chatController.create(tekst,verzender,chatroomID);
    socket.broadcast.emit("messages",msg);
  });

  socket.on("getmessages",function(msg){
    console.log("getmessages: "+msg);
    //chatController.getMessages(msg);
  })

  socket.on("afhandelen",function(msg){
    var idaangeboden = msg[0];
    var userAanbieder = msg[1];
    var userRuiler = msg[2];
    var idtickets = msg[3];
    var eigenTicketOwner = msg[4];
    var eigenTicketTitle = msg[5];
    var eigenTicketSort =msg[6];
    var eigenTicketDescription =msg[7];
    var eigenTicketAmount =msg[8];
    var eigenTicketPrice =msg[9];
    var eigenTicketCity =msg[10];
    var anderTicketOwner = msg[11];
    var anderTicketTitle = msg[12];
    var anderTicketSort = msg[13];
    var anderTicketDescription = msg[14];
    var anderTicketAmount = msg[15];
    var anderTicketPrice = msg[16];
    var anderTicketCity = msg[17];
    var eigenTicketUser = msg[18];
    var anderTicketUser = msg[19];

    ticketController.createTraded(eigenTicketOwner,eigenTicketTitle,eigenTicketSort,eigenTicketDescription,eigenTicketAmount,eigenTicketPrice,eigenTicketCity,anderTicketOwner,anderTicketTitle,anderTicketSort,anderTicketDescription,anderTicketAmount,anderTicketPrice,anderTicketCity,eigenTicketUser,anderTicketUser);
    ticketController.createAfgehandeld(idaangeboden,userAanbieder,userRuiler,idtickets);
  })

}

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
